# Copyright (c) 2021 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")
import("//build/ohos/sa_profile/sa_profile.gni")

config("storage_manager_config") {
  include_dirs = [
    "include",
    "../../interfaces/innerkits/storage_manager/native",
    "//utils/system/safwk/native/include",
    "//utils/native/base/include",
    "../storage_daemon/include",
    "//foundation/filemanagement/storage_service/utils/include",
    "//foundation/appexecfwk/standard/services/bundlemgr/include",
    "//foundation/aafwk/standard/interfaces/innerkits/base/include/ohos/aafwk/base",
  ]
}

ohos_shared_library("storage_manager") {
  sources = [
    "disk/src/disk_manager_service.cpp",
    "ipc/src/storage_manager.cpp",
    "ipc/src/storage_manager_stub.cpp",
    "storage/src/storage_status_service.cpp",
    "storage/src/storage_total_status_service.cpp",
    "storage_daemon_communication/src/storage_daemon_communication.cpp",
    "user/src/multi_user_manager_service.cpp",
    "volume/src/notification.cpp",
    "volume/src/volume_manager_service.cpp",
  ]

  configs = [ ":storage_manager_config" ]

  deps = [
    ":smc",
    "../../interfaces/innerkits/storage_manager/native:storage_manager_sa_proxy",
    "//base/account/os_account/frameworks/common:libaccount_common",
    "//foundation/appexecfwk/standard/services/bundlemgr:libbms",
    "//utils/native/base:utils",
  ]

  external_deps = [
    "ability_runtime:base",
    "ability_runtime:want",
    "bundle_framework:appexecfwk_base",
    "ces_standard:cesfwk_innerkits",
    "hiviewdfx_hilog_native:libhilog",
    "ipc:ipc_core",
    "os_account_standard:os_account_innerkits",
    "safwk:system_ability_fwk",
    "samgr_standard:samgr_proxy",
  ]

  subsystem_name = "filemanagement"
  part_name = "storage_service"
  install_enable = true
}

config("smc_config") {
  include_dirs = [
    "include",
    "../storage_daemon/include",
    "../../interfaces/innerkits/storage_manager/native",
    "//utils/system/safwk/native/include",
    "//utils/native/base/include",
    "//foundation/filemanagement/storage_service/utils/include",
    "//foundation/appexecfwk/standard/services/bundlemgr/include",
    "//foundation/distributedschedule/samgr/interfaces/innerkits/samgr_proxy/include",
  ]
}
ohos_executable("smc") {
  sources = [
    "client/storage_manager_client.cpp",
    "ipc/src/storage_manager_proxy.cpp",
    "smc.cpp",
    "../storage_daemon/utils/file_utils.cpp",
    "innerkits_impl/src/volume_core.cpp",
    "innerkits_impl/src/volume_external.cpp",
    "innerkits_impl/src/disk.cpp",
  ]

  configs = [ ":smc_config" ]

  public_deps = [ "//utils/native/base:utils" ]

  external_deps = [
    "bundle_framework:appexecfwk_base",
    "hiviewdfx_hilog_native:libhilog",
    "ipc:ipc_core",
    "os_account_standard:os_account_innerkits",
    "safwk:system_ability_fwk",
    "samgr_standard:samgr_proxy",
  ]

  subsystem_name = "filemanagement"
  part_name = "storage_service"
  install_enable = true
}
