# Copyright (c) 2021 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")

## Install storage_daemon.cfg to /system/etc/init/storage_daemon.cfg {{{
ohos_prebuilt_etc("storage_daemon_cfg") {
  source = "storage_daemon.cfg"
  relative_install_dir = "init"
  part_name = "storage_service"
  subsystem_name = "filemanagement"
}

## Install storage_daemon.cfg to /system/etc/init/storage_daemon.cfg }}}

config("storage_daemon_config") {
  include_dirs = [
    "include",
    "//utils/native/base/include",
    "//foundation/distributedschedule/samgr/interfaces/innerkits/samgr_proxy/include",
    "../storage_manager/include",
    "//foundation/aafwk/standard/interfaces/innerkits/base/include",
    "//foundation/distributedschedule/safwk/interfaces/innerkits/safwk",
    "//foundation/filemanagement/storage_service/interfaces/innerkits/storage_manager/native",
    "//base/startup/syspara_lite/interfaces/innerkits/native/syspara/include",
    "//base/security/access_token/interfaces/innerkits/accesstoken/include",
    "//foundation/filemanagement/storage_service/services/common/include",
  ]
}

## Install config.txt to /system/etc/init/config.txt {{{
ohos_prebuilt_etc("storage_daemon_disk_config") {
  source = "config.txt"
  relative_install_dir = "init"
  part_name = "storage_service"
  subsystem_name = "filemanagement"
}

ohos_executable("storage_daemon") {
  sources = [
    "../storage_manager/innerkits_impl/src/bundle_stats.cpp",
    "../storage_manager/innerkits_impl/src/disk.cpp",
    "../storage_manager/innerkits_impl/src/storage_stats.cpp",
    "../storage_manager/innerkits_impl/src/volume_core.cpp",
    "../storage_manager/innerkits_impl/src/volume_external.cpp",
    "../storage_manager/ipc/src/storage_manager_proxy.cpp",
    "disk/src/disk_config.cpp",
    "disk/src/disk_info.cpp",
    "disk/src/disk_manager.cpp",
    "ipc/src/storage_daemon.cpp",
    "ipc/src/storage_daemon_stub.cpp",
    "ipc/src/storage_manager_client.cpp",
    "main.cpp",
    "netlink/src/netlink_data.cpp",
    "netlink/src/netlink_handler.cpp",
    "netlink/src/netlink_listener.cpp",
    "netlink/src/netlink_manager.cpp",
    "user/src/mount_manager.cpp",
    "user/src/user_manager.cpp",
    "utils/disk_utils.cpp",
    "utils/file_utils.cpp",
    "utils/mount_argument_utils.cpp",
    "utils/string_utils.cpp",
    "volume/src/external_volume_info.cpp",
    "volume/src/process.cpp",
    "volume/src/volume_info.cpp",
    "volume/src/volume_manager.cpp",
  ]

  defines = [
    "STORAGE_LOG_TAG = \"StorageDaemon\"",
    "LOG_DOMAIN = 0xD004301",
  ]

  configs = [ ":storage_daemon_config" ]

  deps = [
    ":sdc",
    "crypto:libsdcrypto",
    "libfscrypt:libfscryptutils",
    "//utils/native/base:utils",
  ]

  external_deps = [
    "access_token:libaccesstoken_sdk",
    "hiviewdfx_hilog_native:libhilog",
    "ipc:ipc_core",
    "samgr_standard:samgr_proxy",
    "startup_l2:syspara",
  ]

  subsystem_name = "filemanagement"
  part_name = "storage_service"
  install_enable = true
}

config("sdc_config") {
  include_dirs = [
    "include",
    "//foundation/filemanagement/storage_service/services/common/include",
    "//utils/native/base/include",
    "//foundation/distributedschedule/samgr/interfaces/innerkits/samgr_proxy/include",
    "//utils/system/safwk/native/include",
    "//foundation/communication/ipc/interfaces/innerkits/ipc_core/include/",
    "client/include",
    "../../interfaces/innerkits/storage_manager/native",
    "../storage_manager/include",
    "//foundation/appexecfwk/standard/services/bundlemgr/include",
  ]
}

ohos_executable("sdc") {
  sources = [
    "../storage_manager/client/storage_manager_client.cpp",
    "../storage_manager/innerkits_impl/src/bundle_stats.cpp",
    "../storage_manager/innerkits_impl/src/disk.cpp",
    "../storage_manager/innerkits_impl/src/storage_stats.cpp",
    "../storage_manager/innerkits_impl/src/volume_core.cpp",
    "../storage_manager/innerkits_impl/src/volume_external.cpp",
    "../storage_manager/ipc/src/storage_manager_proxy.cpp",
    "client/storage_daemon_client.cpp",
    "ipc/src/storage_daemon_proxy.cpp",
    "sdc.cpp",
    "utils/file_utils.cpp",
  ]

  defines = [
    "STORAGE_LOG_TAG = \"StorageDaemon\"",
    "LOG_DOMAIN = 0xD004301",
  ]

  configs = [ ":sdc_config" ]

  deps = [ "libfscrypt:libfscryptutils" ]

  public_deps = [ "//utils/native/base:utils" ]

  external_deps = [
    "hiviewdfx_hilog_native:libhilog",
    "ipc:ipc_core",
    "safwk:system_ability_fwk",
    "samgr_standard:samgr_proxy",
  ]

  subsystem_name = "filemanagement"
  part_name = "storage_service"
  install_enable = true
}

declare_args() {
  storage_service_fstools = true
}

group("storage_daemon_third_party") {
  deps = []
  if (use_musl && storage_service_fstools) {
    deps += [
      "//third_party/e2fsprogs/misc:blkid",
      "//third_party/exfat-utils:exfat-utils",
      "//third_party/f2fs-tools:f2fs-tools",
      "//third_party/fsck_msdos:fsck_msdos",
      "//third_party/gptfdisk:sgdisk",
      "//third_party/newfs_msdos:newfs_msdos",
      "//third_party/ntfs-3g:ntfsprogs",
    ]
  }
}
