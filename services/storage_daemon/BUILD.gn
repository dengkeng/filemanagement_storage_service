# Copyright (c) 2021 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")

## Install storage_daemon.cfg to /system/etc/init/storage_daemon.cfg {{{
ohos_prebuilt_etc("storage_daemon_cfg") {
  source = "storage_daemon.cfg"
  relative_install_dir = "init"
  part_name = "storage_service"
  subsystem_name = "filemanagement"
}

## Install storage_daemon.cfg to /system/etc/init/storage_daemon.cfg }}}

config("storage_daemon_config") {
  include_dirs = [
    "include",
    "//utils/native/base/include",
    "//foundation/distributedschedule/samgr/interfaces/innerkits/samgr_proxy/include",
    "//base/startup/syspara_lite/interfaces/innerkits/native/syspara/include",
    "//foundation/filemanagement/storage_service/utils/include",
  ]
}

ohos_executable("storage_daemon") {
  sources = [
    "ipc/src/storage_daemon.cpp",
    "ipc/src/storage_daemon_stub.cpp",
    "main.cpp",
    "netlink/src/netlink_data.cpp",
    "netlink/src/netlink_handler.cpp",
    "netlink/src/netlink_listener.cpp",
    "netlink/src/netlink_manager.cpp",
    "user/src/mount_manager.cpp",
    "user/src/user_manager.cpp",
    "utils/file_utils.cpp",
    "utils/mount_argument_utils.cpp",
    "utils/string_utils.cpp",
  ]

  configs = [ ":storage_daemon_config" ]

  deps = [
    ":sdc",
    "crypto:libsdcrypto",
    "//utils/native/base:utils",
  ]

  external_deps = [
    "hiviewdfx_hilog_native:libhilog",
    "ipc:ipc_core",
    "samgr_standard:samgr_proxy",
    "startup_l2:syspara",
  ]

  subsystem_name = "filemanagement"
  part_name = "storage_service"
  install_enable = true
}

config("sdc_config") {
  include_dirs = [
    "include",
    "//foundation/filemanagement/storage_service/utils/include",
    "//utils/native/base/include",
    "//foundation/distributedschedule/samgr/interfaces/innerkits/samgr_proxy/include",
    "//utils/system/safwk/native/include",
    "//foundation/communication/ipc/interfaces/innerkits/ipc_core/include/",
    "client/include",
    "../../interfaces/innerkits/storage_manager/native",
    "../storage_manager/include",
    "//foundation/appexecfwk/standard/services/bundlemgr/include",
  ]
}

ohos_executable("sdc") {
  sources = [
    "client/storage_daemon_client.cpp",
    "ipc/src/storage_daemon_proxy.cpp",
    "sdc.cpp",
    "utils/file_utils.cpp",
    "../storage_manager/client/storage_manager_client.cpp",
    "../storage_manager/ipc/src/storage_manager_proxy.cpp",
    "../storage_manager/innerkits_impl/src/volume_core.cpp",
    "../storage_manager/innerkits_impl/src/volume_external.cpp",
    "../storage_manager/innerkits_impl/src/disk.cpp",
  ]

  configs = [ ":sdc_config" ]

  deps = [ "crypto:libsdcrypto" ]

  public_deps = [ "//utils/native/base:utils" ]

  external_deps = [
    "hiviewdfx_hilog_native:libhilog",
    "ipc:ipc_core",
    "samgr_standard:samgr_proxy",
    "safwk:system_ability_fwk",
  ]

  subsystem_name = "filemanagement"
  part_name = "storage_service"
  install_enable = true
}
